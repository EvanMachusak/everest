/* 
 * Copyright 2012 Mohawk College of Applied Arts and Technology
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you 
 * may not use this file except in compliance with the License. You may 
 * obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
 * License for the specific language governing permissions and limitations under 
 * the License.

 * 
 * User: Justin Fyfe
 * Date: 02-22-2012
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;
using MARC.Everest.Connectors;
using System.Reflection;

namespace MARC.Everest.Formatters.JSON
{
    /// <summary>
    /// Provides formatting and parsing capabilities to/from streams containing JSON
    /// data
    /// </summary>
    [Description("Formatter for JSON")]
    public class JsonFormatter : IStructureFormatter, IValidatingStructureFormatter, ICodeDomStructureFormatter
    {

        // True if the object has been disposed
        private bool m_isDisposed = false;

        // Synchronization object
        private static object s_syncObject = new object();

        // Assemblies generated by this 
        private List<Assembly> m_generatedAssemblies = new List<Assembly>();

        #region IStructureFormatter Members

        /// <summary>
        /// Gets or sets the graph aides that are to be used by this formatter
        /// </summary>
        public List<IStructureFormatter> GraphAides
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the host of this formatter
        /// </summary>
        public IStructureFormatter Host
        {
            get;
            set;
        }

        /// <summary>
        /// Gets the types of structures that this formatter handles
        /// </summary>
        public List<string> HandleStructure
        {
            get { return new List<string>() { "*" }; }
        }

        /// <summary>
        /// Graphs <paramref name="o"/> onto <paramref name="s"/>
        /// </summary>
        /// <param name="s">The stream onto which the JSON data should be graphed</param>
        /// <param name="o">The object which is being graphed</param>
        /// <returns>An instance of the <see cref="T:JsonFormatterGraphResult"/> containing the results of the graph operation</returns>
        public IFormatterGraphResult Graph(System.IO.Stream s, Interfaces.IGraphable o)
        {
            ThrowIfDisposed();
            throw new NotImplementedException();
        }

        /// <summary>
        /// Parse an object from <paramref name="s"/>
        /// </summary>
        /// <param name="s">The stream from which JSON data should be parsed</param>
        /// <returns>An instance of <see cref="T:JsonFormatterParseResult"/> containing the result of the parse operation</returns>
        public IFormatterParseResult Parse(System.IO.Stream s)
        {
            ThrowIfDisposed();
            throw new NotImplementedException();
        }

        /// <summary>
        /// Throw an exception if the object is disposed
        /// </summary>
        private void ThrowIfDisposed()
        {
            if (this.m_isDisposed)
                throw new ObjectDisposedException("JsonFormatter");
        }

        #endregion

        #region ICloneable Members

        /// <summary>
        /// Clones this formatter
        /// </summary>
        public object Clone()
        {
            return this.MemberwiseClone();
        }

        #endregion

        #region IDisposable Members

        /// <summary>
        /// Disposes this instance of the JsonFormatter
        /// </summary>
        public void Dispose()
        {
            if (!this.m_isDisposed)
                this.m_isDisposed = true;
        }

        #endregion

        #region IValidatingStructureFormatter Members

        /// <summary>
        /// Gets or sets a value indicating whether conformance validation should be performed on instances 
        /// that are being graphed or parsed.
        /// </summary>
        public bool ValidateConformance
        {
            get;
            set;
        }

        #endregion

        #region ICodeDomStructureFormatter Members

        /// <summary>
        /// Get or sets a value that indicates whether the generation of runtime classes should be performed 
        /// in memory
        /// </summary>
        public bool GenerateInMemory
        {
            get;
            set;
        }

        /// <summary>
        /// Gets a list of runtime assemblies that have been generated by this 
        /// formatter
        /// </summary>
        public System.Reflection.Assembly[] GeneratedAssemblies
        {
            get { throw new NotImplementedException(); }
        }

        public IFormatterParseResult Parse(System.IO.Stream s, System.Reflection.Assembly a)
        {
            throw new NotImplementedException();
        }

        public IFormatterParseResult Parse(System.Xml.XmlReader s, System.Reflection.Assembly a)
        {
            throw new NotImplementedException();
        }

        public void BuildCache(Type[] t)
        {
            throw new NotImplementedException();
        }

        #endregion
    }
}
